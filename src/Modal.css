.modal {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  position: relative;
}

.close-button {
  display: block;
  width: 100%;
  padding: 10px 0;
  margin-top: 20px;
  background-color: #f44336;
  color: white;
  border: none;
  cursor: pointer;
  text-align: center;
  font-size: 16px;
}

.close-button:hover,
.close-button:focus {
  background-color: #d32f2f;
}


///now playing button

// NowPlayingButton.js
import React from "react";

function NowPlayingButton({ onClick }) {
  return (
    <button className="now-playing-button" onClick={onClick}>
      Now Playing
    </button>
  );
}

export default NowPlayingButton;

import React, { useState, useEffect } from "react";
import Header from "./Header";
import MovieList from "./MovieList";
import Footer from "./Footer";
import SearchBar from "./SearchBar";
import SortDropdown from "./SortDropdown";
import Modal from "./Modal";
import NowPlayingButton from "./NowPlayingButton";

function App() {
  const [movieData, setMovieData] = useState([]);
  const [moviePage, setMoviePage] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedMovie, setSelectedMovie] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [sortOption, setSortOption] = useState("");
  const apiKey = import.meta.env.VITE_APP_API_KEY;

  const fetchData = async (pageNumber) => {
    const response = await fetch(
      `https://api.themoviedb.org/3/movie/now_playing?api_key=${apiKey}&page=${pageNumber}`
    );
    const data = await response.json();
    setMovieData(prevData => [...prevData, ...data.results]);
  };

  const showMoreMovies = async () => {
    console.log("show more movies. page number: " + moviePage);
    setMoviePage(prevPage => prevPage + 1);
    await fetchData(moviePage);
  };

  const searchData = async (query) => {
    if (query === "") {
      return;
    }
    const response = await fetch(
      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}&page=1`
    );
    const data = await response.json();
    console.log("data from search", data);
    setMovieData(data.results);
  };

  const handleMovieClick = (movie) => {
    setSelectedMovie(movie);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedMovie(null);
  };

  const handleSortChange = (option) => {
    setSortOption(option);
  };

  const handleNowPlayingClick = () => {
    setMoviePage(1);
    fetchData(1);
  };

  useEffect(() => {
    showMoreMovies();
  }, []);

  useEffect(() => {
    fetchData(moviePage);
  }, [moviePage]);

  useEffect(() => {
    if (searchQuery) {
      searchData(searchQuery);
    }
  }, [searchQuery]);

  useEffect(() => {
    if (sortOption) {
      let sortedData = [...movieData];
      if (sortOption === "vote_average") {
        sortedData.sort((a, b) => b.vote_average - a.vote_average);
      } else if (sortOption === "release_date") {
        sortedData.sort((a, b) => new Date(b.release_date) - new Date(a.release_date));
      } else if (sortOption === "popularity") {
        sortedData.sort((a, b) => b.popularity - a.popularity);
      }
      setMovieData(sortedData);
    }
  }, [sortOption]);

  return (
    <div className="App">
      <Header />
      <SearchBar onSearch={searchData} />
      <SortDropdown onSortChange={handleSortChange} />
      <NowPlayingButton onClick={handleNowPlayingClick} />
      <MovieList movieData={movieData} showMoreMovies={showMoreMovies} onMovieClick={handleMovieClick} />
      <Footer />
      {isModalOpen && <Modal movie={selectedMovie} onClose={closeModal} />}
    </div>
  );
}

export default App;
Add CSS for the "Now Playing" button (optional):

css
Copy code
/* NowPlayingButton.css */
.now-playing-button {
  margin: 20px 0;
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
  font-size: 16px;
}

.now-playing-button:hover,
.now-playing-button:focus {
  background-color: #0056b3;
}
